<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Off The Point</title>
        <link>https://d53dev.net/posts/</link>
        <description>Recent content in Posts on Off The Point</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Wed, 20 Jun 2018 23:00:11 +0100</lastBuildDate>
        <atom:link href="https://d53dev.net/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>The &#34;new&#34; Java 8 date API is still a mess</title>
            <link>https://d53dev.net/posts/2018/06/the-new-java-8-date-api-is-still-a-mess/</link>
            <pubDate>Wed, 20 Jun 2018 23:00:11 +0100</pubDate>
            
            <guid>https://d53dev.net/posts/2018/06/the-new-java-8-date-api-is-still-a-mess/</guid>
            <description>Do you remember how everybody was hyped about the new date and time APIs introduced in Java 8? Yes, I was hyped too, although I was using jodatime wherever I could anyway. Now this was a while back and at the time of this writing, Java 10 is out and the latest (or at least a fairly current) release is
java version &amp;quot;10.0.1&amp;quot; 2018-04-17 Java(TM) SE Runtime Environment 18.3 (build 10.</description>
            <content type="html"><![CDATA[<p>Do you remember how everybody was hyped about the new date and time APIs introduced in Java 8? Yes, I was hyped too, although I was using <em>jodatime</em> wherever I could anyway. Now this was a while back and at the time of this writing, Java 10 is out and the latest (or at least a fairly current) release is</p>
<pre><code class="language-console" data-lang="console">java version &quot;10.0.1&quot; 2018-04-17
Java(TM) SE Runtime Environment 18.3 (build 10.0.1+10)
Java HotSpot(TM) 64-Bit Server VM 18.3 (build 10.0.1+10, mixed mode)
</code></pre><p>so we all have even saner APIs to deal with dates and times, right? <strong>Wrong.</strong></p>
<p><img src="https://media.giphy.com/media/3oFyDpijVlI0bSoB8Y/giphy.gif#center" alt="Vince Vaughn screaming &ldquo;erroneous&rdquo;"></p>
<h2 id="the-unsuspecting-dev">The unsuspecting Dev</h2>
<p>Today I was configuring some timeouts at work, and I though to myself</p>
<blockquote>
<p>Why not be really explicit about what values and units are used?</p>
</blockquote>
<p>It is 2018 and I don’t want or need to see lines like</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">long</span> timeoutmillis <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">long</span><span style="color:#f92672">)</span> 420_000 <span style="color:#f92672">*</span> COMPANY_INTERNAL_TIME_FACTOR <span style="color:#f92672">*</span> 1e<span style="color:#f92672">-</span>3 <span style="color:#f92672">-</span> 1
</code></pre></div><p>so, with the help of my trusty IDE autocompletion, I arrived at something much more pleasing to the eye:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Duration<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span>90<span style="color:#f92672">,</span> ChronoUnit<span style="color:#f92672">.</span><span style="color:#a6e22e">SECONDS</span><span style="color:#f92672">)</span><span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>ChronoUnit<span style="color:#f92672">.</span><span style="color:#a6e22e">MILLIS</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span>
</code></pre></div><p>Looks pretty good, no? It’s quite explicit about what values are used and about the units they have. Not so fast. A
RuntimeException in the logs.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">java<span style="color:#f92672">.</span><span style="color:#a6e22e">time</span><span style="color:#f92672">.</span><span style="color:#a6e22e">temporal</span><span style="color:#f92672">.</span><span style="color:#a6e22e">UnsupportedTemporalTypeException</span><span style="color:#f92672">:</span> Unsupported unit<span style="color:#f92672">:</span> Millis
</code></pre></div><p>Surely, that must be some kind of silly error on my side. A quick check with the
<a href="https://docs.oracle.com/javase/10/docs/api/java/time/Duration.html#get(java.time.temporal.TemporalUnit)">documentation</a>
confirmed that it was much, much worse. It says, and I kid you not,</p>
<blockquote>
<p>This returns a value for each of the two supported units, SECONDS and NANOS. All other units throw an exception.</p>
</blockquote>
<p>This cannot be real. IT CANNOT BE REALLY SAYING WHAT IT SAYS. But it does. Here’s a screenshot:
̦</p>
<p><img src="/img/screenshot-date-api.png" alt="Screnshot From JavaDoc"></p>
<h2 id="api-design-at-its-finest">API Design at it’s finest</h2>
<p>So somebody, actually multiple people, looked at the proposal and said,</p>
<blockquote>
<p>why, yes, let this API accept only 2 units and throw exceptions otherwise. That, right here, is an API worthy of
bringing into our specification.</p>
</blockquote>
<p>And that’s why, folks, we cannot have nice APIs, not even now, in <strong>2000-freaking-18.</strong> But wait, I have another goodie
for you. Maybe you saw it already: Calling this method might throw 2 different exceptions:</p>
<blockquote>
<p>Throws: DateTimeException – if the unit is not supported UnsupportedTemporalTypeException – if the unit is not
supported</p>
</blockquote>
<p>Um, which will it throw? Anyway, Duration <em>is actually able to do the conversion</em> I required.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Duration<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span>90<span style="color:#f92672">,</span> ChronoUnit<span style="color:#f92672">.</span><span style="color:#a6e22e">SECONDS</span><span style="color:#f92672">)</span><span style="color:#f92672">.</span><span style="color:#a6e22e">toMillis</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
</code></pre></div><p>So if you wanted to convert dynamically, you are required to write a big switch statement or a freaking if-cascade.</p>
]]></content>
        </item>
        
        <item>
            <title>Using ElementaryOS Professionally</title>
            <link>https://d53dev.net/posts/2018/03/using-elementaryos-professionally/</link>
            <pubDate>Wed, 28 Mar 2018 22:07:08 +0100</pubDate>
            
            <guid>https://d53dev.net/posts/2018/03/using-elementaryos-professionally/</guid>
            <description>My employer agreed on buying me a new and shiny MacBook Pro, so I thought it’s a good time to reflect on my experiences with using ElementaryOS (Freya) professionally daily driver for almost a year.
TL;DR I mostly enjoyed the ride. Elementary is fast, polished, functional and has outstanding multi-monitor support. On the other hand, it’s still a Linux and the desktop experience is not nearly as polished as on MacOS and Windows.</description>
            <content type="html"><![CDATA[<p><img src="/img/elementary.png" alt="Screnshot From JavaDoc"></p>
<p>My employer agreed on buying me a new and shiny MacBook Pro, so I thought it’s
a good time to reflect on my experiences with using ElementaryOS (Freya)
professionally daily driver for almost a year.</p>
<h2 id="tldr">TL;DR</h2>
<p>I mostly enjoyed the ride. Elementary is fast, polished, functional and has
outstanding multi-monitor support. On the other hand, it’s still a Linux and
the desktop experience is not nearly as polished as on MacOS and Windows.</p>
<h2 id="the-good">The Good</h2>
<p>The installation worked flawlessly on my Thinkpad T460p (vPro branded Core
i5-6440HQ, 16GB RAM, 256GB SSD, integrated Intel HD 530), and I didn't have to
chase any drivers.</p>
<p>At the time of this writing, the current version &ldquo;Freya&rdquo; is
based off of Ubuntu 16.04, so the internals should be familiar to all you Ubuntu
fanboys (like me). Power users might sometimes run into trouble because
<code>uname -r</code> doesn't return <code>xenial</code>, it returns <code>freya</code>, so anything that relies
on that, like apt repositories, need manual intervention.</p>
<p>All my favourite IDEs (IDEA and VSCode) worked without any issues and with good
performance.</p>
<p>The overall look-and-feel of ElementaryOS is very nice. Some would even call it
polished, but I wouldn't go so far just yet. It's definitely the most
aesthetically pleasing Linux desktop I know, but it still has some rough edges
here and there.</p>
<p>The built-in apps are functional and pretty, albeit somewhat bare-bones. I will
discuss this in the next section in more detail.</p>
<p>The one thing that took me by surprise was the outstanding multi-monitor
support. I was using 2 external screens, one via HDMI and the other via
DisplayPort (remember the times where laptops still had all kinds of different
connectors?) together with the internal screen and ElementaryOS handled it just
fine. It worked flawlessly with all TVs and projectors I ever connected it to,
and it out-performed most Windows-based laptops in terms of compatibility. I
know this is partly due to the well-crafted hardware of the Thinkpad, but it
worked better than other similar Thinkpads running Windows, at least in my
office environment.</p>
<p>One thing that is much nicer on Linux than on MacOS is the Docker integration.
That's not a feature of ElementaryOS but it is still a strong point, in my book.
MacOS doesn’t have access to the docker bridge, so you cannot access containers
directly – only through published ports (or by monkey-patching docker, which
somehow hardcodes this network config). This also means that you need to
dockerize any application that needs to talk to any other dockerized app
directly, which lead to quite some overhead in the beginning.</p>
<h2 id="the-bad">The Bad</h2>
<p>The &ldquo;AppCenter&rdquo; has not yet reached critical mass, meaning that proper
applications are few and far in-between. Most paid apps were not worth their
price, in my opinion. I'm not sure that there is enough interest to ever make
AppCenter a platform worthy of broad adoption, and the 70/30 (but at least
50ct) platform fee is a bit steep for a platform with such a niche target
demographic (i.e. people willing to install a GNU/Linux desktop,
a free, as in beer, product AND willing to pay for apps in an app store).</p>
<p>The built-in apps, such as Mail and Calendar, are forks of other popular
open-source projects that now implement the ElementaryOS look and feel, but are
rather limited in functionality. For the most part, they work fine, but you
might be out of luck if you require more advanced settings or customization. In
my case, the calendar was incompatible with my company email system and there
was no way to make it work.</p>
<p>This leads me to the next point: the look-and-feel, though very nice, only works
for apps developed for ElementaryOS specifically. Other GTK+ or Qt apps will
look and behave differently.</p>
<h2 id="the-ugly">The Ugly</h2>
<p>At times, the configuration of wingpanel would get corrupted. This would happen
with or without my direct interaction, e.g., after removing or updating
applications or libraries. The effect was that the top bar and the app launcher
menu were either frozen or would disappear completely. A forensic cat-and-mouse
game ensued trying to find the reason for the mess.</p>
]]></content>
        </item>
        
    </channel>
</rss>
