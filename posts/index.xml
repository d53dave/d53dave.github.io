<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Off The Point</title>
        <link>https://d53dev.net/posts/</link>
        <description>Recent content in Posts on Off The Point</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Wed, 19 Feb 2020 07:42:22 +0100</lastBuildDate>
        <atom:link href="https://d53dev.net/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>How to speed up database inserts with many duplicates</title>
            <link>https://d53dev.net/posts/2020/02/how-to-speed-up-database-inserts-with-many-duplicates/</link>
            <pubDate>Wed, 19 Feb 2020 07:42:22 +0100</pubDate>
            
            <guid>https://d53dev.net/posts/2020/02/how-to-speed-up-database-inserts-with-many-duplicates/</guid>
            <description>or &amp;ldquo;how to not be stupid with your inserts&amp;rdquo; I&#39;m working on a small side project where I&#39;m consuming public listing data from an API for fun and profit. The API will allow me to GET the newest items corresponding to a specific query, and paginates at a maximum page size of 50.
I store all listings that I&#39;ve already seen in Postgres for later analysis but due to the nature of the API, I&#39;m unable to pull only new listings and have to resort to somehow decide whether or not I should continue paginating.</description>
            <content type="html"><![CDATA[<h2 id="or-how-to-not-be-stupid-with-your-inserts">or &ldquo;how to not be stupid with your inserts&rdquo;</h2>
<p>I'm working on a small side project where I'm consuming public listing data from
an API for fun and profit. The API will allow me to <code>GET</code> the newest items
corresponding to a specific query, and paginates at a maximum page size of 50.</p>
<p>I store all listings that I've already seen in Postgres for later analysis but
due to the nature of the API, I'm unable to pull only new listings and have to
resort to somehow decide whether or not I should continue paginating.</p>
<p>Since I'm quite comfortable and productive with Python, I've implemented this as
an <code>APScheduler</code> job, which will run at a given interval, say, every 10 minutes.
Upon startup, the job will pull the first page of new listings, persist them and
count how many duplicates it encountered. I decided that it was good enoughâ„¢ to
stop getting new pages whenever a full page of duplicate listings was
encountered. I acknowledge that this is not the most robust design, especially
when there are many new pages to be pulled and errors occur somewhere in the
middle of the pagination. It might also miss a small number of listings around
edge cases, but I found this to be negligible so far.</p>
<h2 id="sequential-inserts-are-bad">Sequential inserts are bad</h2>
<p>So far so good. I wanted to get off the ground quickly so instead of thinking
of a proper way of checking for duplicates, I would just do a sequential insert
and catch the specific error thrown when duplicates are encountered:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">for</span> listing <span style="color:#f92672">in</span> listings:
  <span style="color:#66d9ef">try</span>:
    await connection<span style="color:#f92672">.</span>execute(
      <span style="color:#e6db74"></span><span style="color:#e6db74">&#39;</span><span style="color:#e6db74">INSERT INTO listings (a, b, c) VALUES ($1, $2, $3)</span><span style="color:#e6db74">&#39;</span>, listing<span style="color:#f92672">.</span>a, listing<span style="color:#f92672">.</span>b, listing<span style="color:#f92672">.</span>c)
  <span style="color:#66d9ef">except</span> asyncpg<span style="color:#f92672">.</span>exceptions<span style="color:#f92672">.</span>UniqueViolationError:
      duplicates<span style="color:#f92672">.</span>append(listing)
        <span style="color:#66d9ef">continue</span>
</code></pre></div><p>I mean, it's not pretty, but it works, right? Well, it did for the first
prototype but after the project grew a bit, I realized that I'm wasting
resources on the service, on the network and the database. The service tries to
persist a listing that is already present, which will fail, but in this process,
data needs to be serialized, put on the wire, deserialized on the DB, checked
against constraints and finally a response with an appropriate error code needs
to go back to the service which is now handling an error case that is not a real
error case.</p>
<p>Logs looked something like this:</p>
<pre><code class="language-;" data-lang=";">2020-02-17 09:17:18 INFO API GET took 6820.19 ms. Insert took 40122.35 ms and inserted 41 listings.
2020-02-17 09:22:28 INFO API GET took 6130.07 ms. Insert took 42001.81 ms and inserted 0 listings.
2020-02-17 09:22:28 INFO Found full page of duplicates. Exiting!
</code></pre><h2 id="finding-a-smarter-way-to-insert">Finding a smarter way to insert</h2>
<p>Since I'm running this on cheap VPSs, I don't want to waste resources, which are
scarce from the get-go. The logs suggest that it takes around one full second
for an insert per listing, whether or not that listing is eventually inserted.
Inserting 50 listings takes the same amount of time as inserting none, which is
obviously and utterly ðŸ’©. So after thinking about a better solution, I came to
the realization that I can do a quick and relatively cheap membership check
using the IDs of the listings I want to persist since they are primary keys and
have an index by default.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">listing_ids <span style="color:#f92672">=</span> tuple(map(<span style="color:#66d9ef">lambda</span> l: l<span style="color:#f92672">.</span>id, listings))

duplicate_ids <span style="color:#f92672">=</span> await connection<span style="color:#f92672">.</span>fetch(
    <span style="color:#e6db74"></span><span style="color:#e6db74">&#39;</span><span style="color:#e6db74">SELECT id from listings WHERE id = any($1::int8[])</span><span style="color:#e6db74">&#39;</span>,
    listing_ids)
</code></pre></div><p>which now allows me to write the insert code without catching <code>UniqueViolationError</code> and to use <code>connection.executemany</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">non_duplicate_listings <span style="color:#f92672">=</span> list(
    filter(<span style="color:#66d9ef">lambda</span> l: l<span style="color:#f92672">.</span>id <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> duplicate_ids, listings))

insert_tuples <span style="color:#f92672">=</span> list(
    map(<span style="color:#66d9ef">lambda</span> l: l<span style="color:#f92672">.</span>to_insertable_tuple(), non_duplicate_listings))

await connection<span style="color:#f92672">.</span>executemany(
    <span style="color:#e6db74"></span><span style="color:#e6db74">&#39;</span><span style="color:#e6db74">INSERT INTO listings (a, b, c) VALUES ($1, $2, $3)</span><span style="color:#e6db74">&#39;</span>, insert_tuples)

</code></pre></div><p>Besides the fact that this feels much cleaner (and as a consequence, I don't
feel like I need a shower after working with this service), the logs prove that
it has been a good idea.</p>
<h3 id="results">Results</h3>
<p>Let's look at some cold hard data from the new version of the code:</p>
<pre><code class="language-;" data-lang=";">2020-02-18 06:31:13 INFO API GET took 7022.19 ms. Insert took 6280.75 ms and inserted 39 listings.
2020-02-18 06:31:04 INFO API GET took 6446.77 ms. Insert took 235.86 ms and inserted 0 listings.
2020-02-18 06:31:04 INFO Found first page full of duplicates, exiting.
</code></pre><p>Inserting listings is now much faster, as many inserts can happen in one go, and
not in a separate round-trip insert statement for each listing. Average insert
time per listing went down from around <code>1000ms</code> to around <code>160ms</code>, which is an
improvement of <code>6x</code>. Dealing with pages full of duplicate listings became
significantly faster as well because it can stop after determining that all IDs
are already present in the database. It improved from 40-ish seconds to just
<code>235ms</code> or by a factor of 170, yes, freaking <code>170x</code>.</p>
<p><img src="/img/boom.gif#center" alt="Boom!"></p>
<p>All in all, I am satisfied with my refactoring. Who could have thunk that doing
things in a smarter way would lead to better results?</p>
]]></content>
        </item>
        
        <item>
            <title>Migrating a Standalone Go Project from Dep to Go Mod</title>
            <link>https://d53dev.net/posts/2019/05/migrating-a-standalone-go-project-from-dep-to-go-mod/</link>
            <pubDate>Fri, 17 May 2019 18:09:45 +0100</pubDate>
            
            <guid>https://d53dev.net/posts/2019/05/migrating-a-standalone-go-project-from-dep-to-go-mod/</guid>
            <description>This is a much shorter article than I thought it would be when I started migrating our, admittedly small, projects to go mod.
Iâ€™ve been migrating some test infrastructure to Kubernetes at work lately and, at some stage during the process, it became clear that we needed a tiny Microservice (~300LOC with tests) to hand out unique tokens to all pods that make up one run of load testing. This is somewhat bad practice but was not avoidable due to the way our load test application worked internally.</description>
            <content type="html"><![CDATA[<p>This is a much shorter article than I thought it would be when I started
migrating our, admittedly small, projects to <code>go mod</code>.</p>
<p>Iâ€™ve been migrating some test infrastructure to Kubernetes at work lately and,
at some stage during the process, it became clear that we needed a tiny
Microservice (~300LOC with tests) to hand out unique tokens to all pods that
make up one run of load testing. This is somewhat bad practice but was not
avoidable due to the way our load test application worked internally. I wonâ€™t
discuss the details of the service here but the important part was the I had
initially decided to use Go and <code>go dep</code> for dependency management. It worked
surprisingly well.</p>
<p>One thing that bothered me about Go was the whole <code>$GOPATH</code> mess. I had a hard
time understanding the reasoning behind enforcing this structure and it seemed
outdated in 2018 (when I started these projects). Versioning was painful and all
external packages of all dependencies were kept in the same folder (and Iâ€™ve
seen project check those into their version control â€“ yuck).</p>
<p>The good news is that <code>go mod</code> allows projects to live outside <code>$GOPATH</code> and it
improves package management a lot. For simple projects like this one, it
eliminates package management since it scans the source files for imports and
automatically downloads them.</p>
<p>Another little downside before go mod was CI. Our build was pretty simple, but it still depended on dep which had to be installed on each build (because I was lazy and didnâ€™t invest more time into setting things up) before it could pull dependencies and run tests. This is now gone as well.</p>
<h2 id="prerequisites">Prerequisites</h2>
<p>First of all, go mod was introduced as an experimental feature with go 1.11, so make sure to grab at least that version. Iâ€™m using</p>
<pre><code class="language-;" data-lang=";">--- projects/go-dep-mod â€¹masterâ€º Â» go version
go version go1.12.5 darwin/amd64
</code></pre><p>for this small demonstration.</p>
<h2 id="getting-rid-of-dep">Getting rid of dep</h2>
<p>Being an external dependency, the only thing to do here is to remove the Gopkg files. Starting from the project like this</p>
<pre><code class="language-;" data-lang=";">--- projects/go-dep-mod Â» lt
Permissions Size User  Date Modified Name
drwxr-xr-x     - dsere 17 May 11:01  .
drwxr-xr-x     - dsere 17 May 11:01  â”œâ”€â”€ counters
.rw-r--r--  1.5k dsere 17 May 11:01  â”‚  â”œâ”€â”€ counters.go
.rw-r--r--  2.2k dsere 17 May 11:01  â”‚  â””â”€â”€ counters_test.go
.rw-r--r--  2.0k dsere 17 May 11:01  â”œâ”€â”€ Gopkg.lock
.rw-r--r--   741 dsere 17 May 11:01  â”œâ”€â”€ Gopkg.toml
.rw-r--r--   851 dsere 17 May 11:01  â”œâ”€â”€ main.go
.rw-r--r--  1.6k dsere 17 May 11:01  â”œâ”€â”€ main_test.go
.rw-r--r--   893 dsere 17 May 11:01  â””â”€â”€ README.md
</code></pre><p>We can go ahead and</p>
<pre><code class="language-;" data-lang=";">rm Gopkg*
</code></pre><h2 id="initializing-a-go-module">Initializing a Go module</h2>
<p>Next, we tell Go to initialize a module</p>
<pre><code class="language-;" data-lang=";">go mod init github.com/you/go-dep-mod
</code></pre><p>This will create 2 new files</p>
<pre><code class="language-;" data-lang=";">--- projects/go-dep-mod Â» lt
Permissions Size User  Date Modified Name
drwxr-xr-x     - dsere 17 May 11:03  .
drwxr-xr-x     - dsere 17 May 11:02  â”œâ”€â”€ counters
.rw-r--r--  1.7k dsere 17 May 11:02  â”‚  â”œâ”€â”€ counters.go
.rw-r--r--  2.6k dsere 17 May 11:02  â”‚  â””â”€â”€ counters_test.go
.rw-r--r--   570 dsere 17 May 11:03  â”œâ”€â”€ Dockerfile
.rw-r--r--   680 dsere 17 May 11:03  â”œâ”€â”€ go.mod
.rw-r--r--  2.1k dsere 17 May 11:03  â”œâ”€â”€ go.sum
.rw-r--r--  1.1k dsere 17 May 11:03  â”œâ”€â”€ main.go
.rw-r--r--  2.0k dsere 17 May 11:03  â”œâ”€â”€ main_test.go
.rw-r--r--  1.9k dsere 17 May 11:03  â””â”€â”€ README.md
</code></pre><p>Letâ€™s have a look at <code>go.mod</code></p>
<pre><code class="language-;" data-lang=";">--- projects/go-dep-mod Â» bat go.mod
â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
       â”‚ File: go.mod
â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
   1   â”‚ module github.com/you/go-dep-mod
   2   â”‚
   3   â”‚ require (
   4   â”‚     github.com/davecgh/go-spew v1.1.0 // indirect
   5   â”‚     github.com/labstack/echo v3.3.5+incompatible
   6   â”‚     github.com/labstack/gommon v0.0.0-20180613044413-d6898124de91 // indirect
   7   â”‚     github.com/mattn/go-colorable v0.0.9 // indirect
   8   â”‚     github.com/mattn/go-isatty v0.0.4 // indirect
   9   â”‚     github.com/pmezard/go-difflib v1.0.0 // indirect
  10   â”‚     github.com/stretchr/testify v1.2.2
  11   â”‚     github.com/valyala/bytebufferpool v1.0.0 // indirect
  12   â”‚     github.com/valyala/fasttemplate v0.0.0-20170224212429-dcecefd839c4 // indirect
  13   â”‚     golang.org/x/crypto v0.0.0-20180608092829-8ac0e0d97ce4 // indirect
  14   â”‚     golang.org/x/sys v0.0.0-20181122145206-62eef0e2fa9b // indirect
  15   â”‚ )
â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
</code></pre><p>and <code>go.sum</code></p>
<pre><code class="language-;" data-lang=";">--- projects/go-dep-mod Â» bat go.sum
â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
       â”‚ File: go.sum
â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
   1   â”‚ github.com/davecgh/go-spew v1.1.0 h1:ZD&lt;truncated&gt;8=
   2   â”‚ github.com/davecgh/go-spew v1.1.0/go.mod h1:J7&lt;truncated&gt;38=
   3   â”‚ github.com/labstack/echo v3.3.5+incompatible h1:9P&lt;truncated&gt;O4=
   4   â”‚ github.com/labstack/echo v3.3.5+incompatible/go.mod h1:0I&lt;truncated&gt;1s=
   5   â”‚ github.com/labstack/gommon v0.0.0-20180613044413-d6898124de91 h1:6R2om+NMGEk=
   6   â”‚ github.com/labstack/gommon v0.0.0-20180613044413-d6898124de91/go.mod h1:/tj9cNJ4=
   7   â”‚ github.com/mattn/go-colorable v0.0.9 h1:UVL&lt;truncated&gt;4=
   8   â”‚ github.com/mattn/go-colorable v0.0.9/go.mod h1:9v&lt;truncated&gt;ZU=
   9   â”‚ github.com/mattn/go-isatty v0.0.4 h1:bnP&lt;truncated&gt;DYs=
  10   â”‚ github.com/mattn/go-isatty v0.0.4/go.mod h1:M+lRX&lt;truncated&gt;i4=
  11   â”‚ github.com/pmezard/go-difflib v1.0.0 h1:4DB&lt;truncated&gt;M=
  12   â”‚ github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH&lt;truncated&gt;YZ/4=
  13   â”‚ github.com/stretchr/testify v1.2.2 h1:bSDN&lt;truncated&gt;oJ1w=
  14   â”‚ github.com/stretchr/testify v1.2.2/go.mod h1:a8&lt;truncated&gt;DkUVs=
  15   â”‚ github.com/valyala/bytebufferpool v1.0.0 h1:GqA&lt;truncated&gt;Pw=
  16   â”‚ github.com/valyala/bytebufferpool v1.0.0/go.mod h1:6b&lt;truncated&gt;sc=
  17   â”‚ github.com/valyala/fasttemplate v0.0.0-20170224212429-dcecefd839c4 h1:gK&lt;truncated&gt;=
  18   â”‚ github.com/valyala/fasttemplate v0.0.0-20170224212429-dcecefd839c4/go.mod h1:fasdw=
  19   â”‚ golang.org/x/crypto v0.0.0-20180608092829-8ac0e0d97ce4 h1:wvi&lt;truncated&gt;I=
  20   â”‚ golang.org/x/crypto v0.0.0-20180608092829-8ac0e0d97ce4/go.mod h1:6S&lt;truncated&gt;4=
  21   â”‚ golang.org/x/sys v0.0.0-20181122145206-62eef0e2fa9b h1:MQE+LT/ABUuuvEZ+mAkup74op4=
  22   â”‚ golang.org/x/sys v0.0.0-20181122145206-62eef0e2fa9b/go.mod h1:STP8&lt;truncated&gt;hY=
â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
</code></pre><p>So these have, in effect, the same contents as the Gopkg files that <code>dep</code> used
before: a list of dependencies and a file containing version and checksum
information. Itâ€™s nice that go mod identifies indirect dependencies as such in
the <code>go.mod</code> file.</p>
<h2 id="getting-dependencies-and-building">Getting dependencies and building</h2>
<p>Now for the beautiful parts of this process: run <code>go mod download</code> to install
the dependencies (<code>go mod vendor</code> if you want your dependencies into
<code>&lt;your_dir&gt;/vendor</code>, i.e. not in the default location which is
<code>$GOPATH/pkg/mod</code>).</p>
<pre><code class="language-;" data-lang=";">--- projects/go-dep-mod Â» go mod vendor
--- projects/go-dep-mod Â» lt
Permissions Size User  Date Modified Name
drwxr-xr-x     - dsere 17 May 11:43  .
drwxr-xr-x     - dsere 17 May 11:02  â”œâ”€â”€ counters
.rw-r--r--  1.7k dsere 17 May 11:02  â”‚  â”œâ”€â”€ counters.go
.rw-r--r--  2.6k dsere 17 May 11:02  â”‚  â””â”€â”€ counters_test.go
.rw-r--r--   570 dsere 17 May 11:03  â”œâ”€â”€ Dockerfile
.rw-r--r--   680 dsere 17 May 11:03  â”œâ”€â”€ go.mod
.rw-r--r--  2.1k dsere 17 May 11:03  â”œâ”€â”€ go.sum
.rw-r--r--  1.1k dsere 17 May 11:03  â”œâ”€â”€ main.go
.rw-r--r--  2.0k dsere 17 May 11:03  â”œâ”€â”€ main_test.go
.rw-r--r--  1.9k dsere 17 May 11:03  â”œâ”€â”€ README.md
drwxr-xr-x     - dsere 17 May 11:43  â””â”€â”€ vendor
drwxr-xr-x     - dsere 17 May 11:43     â”œâ”€â”€ github.com
drwxr-xr-x     - dsere 17 May 11:43     â”‚  â”œâ”€â”€ davecgh
drwxr-xr-x     - dsere 17 May 11:43     â”‚  â”‚  â””â”€â”€ go-spew
.rw-r--r--   763 dsere 17 May 11:43     â”‚  â”‚     â”œâ”€â”€ LICENSE
drwxr-xr-x     - dsere 17 May 11:43     â”‚  â”‚     â””â”€â”€ spew
.rw-r--r--  5.8k dsere 17 May 11:43     â”‚  â”‚        â”œâ”€â”€ bypass.go
.rw-r--r--  1.7k dsere 17 May 11:43     â”‚  â”‚        â”œâ”€â”€ bypasssafe.go
.rw-r--r--   10k dsere 17 May 11:43     â”‚  â”‚        â”œâ”€â”€ common.go
.rw-r--r--   12k dsere 17 May 11:43     â”‚  â”‚        â”œâ”€â”€ config.go
.rw-r--r--  8.5k dsere 17 May 11:43     â”‚  â”‚        â”œâ”€â”€ doc.go
.rw-r--r--   13k dsere 17 May 11:43     â”‚  â”‚        â”œâ”€â”€ dump.go
.rw-r--r--   11k dsere 17 May 11:43     â”‚  â”‚        â”œâ”€â”€ format.go
.rw-r--r--  6.0k dsere 17 May 11:43     â”‚  â”‚        â””â”€â”€ spew.go

[and many more lines]
</code></pre><p>One thing that made me very, very happy was that dependency download can be implicit, as in, Go will notice it doesnâ€™t have dependencies and instead of complaining, just go out and get them.</p>
<pre><code class="language-;" data-lang=";">--- projects/go-dep-mod Â» rm -r vendor/
--- projects/go-dep-mod Â» go test
go: finding github.com/mattn/go-isatty v0.0.4
go: finding github.com/mattn/go-colorable v0.0.9
go: finding github.com/labstack/gommon v0.0.0-20180613044413-d6898124de91
go: finding github.com/labstack/echo v3.3.5+incompatible
go: finding github.com/valyala/bytebufferpool v1.0.0
go: finding github.com/valyala/fasttemplate v0.0.0-20170224212429-dcecefd839c4
go: finding github.com/davecgh/go-spew v1.1.0
go: finding github.com/stretchr/testify v1.2.2
go: finding golang.org/x/crypto v0.0.0-20180608092829-8ac0e0d97ce4
go: finding golang.org/x/sys v0.0.0-20181122145206-62eef0e2fa9b
go: finding github.com/pmezard/go-difflib v1.0.0
go: downloading github.com/labstack/echo v3.3.5+incompatible
go: downloading github.com/stretchr/testify v1.2.2
go: extracting github.com/stretchr/testify v1.2.2
go: extracting github.com/labstack/echo v3.3.5+incompatible
go: downloading github.com/pmezard/go-difflib v1.0.0
go: downloading github.com/davecgh/go-spew v1.1.0
go: extracting github.com/pmezard/go-difflib v1.0.0
go: downloading github.com/labstack/gommon v0.0.0-20180613044413-d6898124de91
go: downloading golang.org/x/crypto v0.0.0-20180608092829-8ac0e0d97ce4
go: extracting github.com/davecgh/go-spew v1.1.0
go: extracting github.com/labstack/gommon v0.0.0-20180613044413-d6898124de91
go: downloading github.com/mattn/go-isatty v0.0.4
go: downloading github.com/mattn/go-colorable v0.0.9
go: downloading github.com/valyala/fasttemplate v0.0.0-20170224212429-dcecefd839c4
go: extracting github.com/mattn/go-colorable v0.0.9
go: extracting github.com/mattn/go-isatty v0.0.4
go: extracting github.com/valyala/fasttemplate v0.0.0-20170224212429-dcecefd839c4
go: downloading github.com/valyala/bytebufferpool v1.0.0
go: extracting github.com/valyala/bytebufferpool v1.0.0
go: extracting golang.org/x/crypto v0.0.0-20180608092829-8ac0e0d97ce4
PASS
ok    github.com/you/go-dep-mod 0.023s
</code></pre><p>Magical, isnâ€™t it?</p>
<p><img src="https://media.giphy.com/media/12NUbkX6p4xOO4/giphy.gif#center" alt="Magical"></p>
]]></content>
        </item>
        
        <item>
            <title>The &#34;new&#34; Java 8 date API is still a mess</title>
            <link>https://d53dev.net/posts/2018/06/the-new-java-8-date-api-is-still-a-mess/</link>
            <pubDate>Wed, 20 Jun 2018 23:00:11 +0100</pubDate>
            
            <guid>https://d53dev.net/posts/2018/06/the-new-java-8-date-api-is-still-a-mess/</guid>
            <description>Do you remember how everybody was hyped about the new date and time APIs introduced in Java 8? Yes, I was hyped too, although I was using jodatime wherever I could anyway. Now this was a while back and at the time of this writing, Java 10 is out and the latest (or at least a fairly current) release is
java version &amp;quot;10.0.1&amp;quot; 2018-04-17 Java(TM) SE Runtime Environment 18.3 (build 10.</description>
            <content type="html"><![CDATA[<p>Do you remember how everybody was hyped about the new date and time APIs introduced in Java 8? Yes, I was hyped too, although I was using <em>jodatime</em> wherever I could anyway. Now this was a while back and at the time of this writing, Java 10 is out and the latest (or at least a fairly current) release is</p>
<pre><code class="language-console" data-lang="console">java version &quot;10.0.1&quot; 2018-04-17
Java(TM) SE Runtime Environment 18.3 (build 10.0.1+10)
Java HotSpot(TM) 64-Bit Server VM 18.3 (build 10.0.1+10, mixed mode)
</code></pre><p>so we all have even saner APIs to deal with dates and times, right? <strong>Wrong.</strong></p>
<p><img src="https://media.giphy.com/media/3oFyDpijVlI0bSoB8Y/giphy.gif#center" alt="Vince Vaughn screaming &ldquo;erroneous&rdquo;"></p>
<h2 id="the-unsuspecting-dev">The unsuspecting Dev</h2>
<p>Today I was configuring some timeouts at work, and I thought to myself</p>
<blockquote>
<p>Why not be explicit about what values and units are used?</p>
</blockquote>
<p>It is 2018 and I donâ€™t want or need to see lines like</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">long</span> timeoutmillis <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">long</span><span style="color:#f92672">)</span> 420_000 <span style="color:#f92672">*</span> COMPANY_INTERNAL_TIME_FACTOR <span style="color:#f92672">*</span> 1e<span style="color:#f92672">-</span>3 <span style="color:#f92672">-</span> 1
</code></pre></div><p>so, with the help of my trusty IDE autocompletion, I arrived at something much more pleasing to the eye:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Duration<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span>90<span style="color:#f92672">,</span> ChronoUnit<span style="color:#f92672">.</span><span style="color:#a6e22e">SECONDS</span><span style="color:#f92672">)</span><span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>ChronoUnit<span style="color:#f92672">.</span><span style="color:#a6e22e">MILLIS</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span>
</code></pre></div><p>Looks pretty good, no? Itâ€™s quite explicit about what values are used and about the units they have. Not so fast. A
RuntimeException in the logs.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">java<span style="color:#f92672">.</span><span style="color:#a6e22e">time</span><span style="color:#f92672">.</span><span style="color:#a6e22e">temporal</span><span style="color:#f92672">.</span><span style="color:#a6e22e">UnsupportedTemporalTypeException</span><span style="color:#f92672">:</span> Unsupported unit<span style="color:#f92672">:</span> Millis
</code></pre></div><p>Surely, that must be some kind of silly error on my side. A quick check with the
<a href="https://docs.oracle.com/javase/10/docs/api/java/time/Duration.html#get(java.time.temporal.TemporalUnit)">documentation</a>
confirmed that it was much, much worse. It says, and I kid you not,</p>
<blockquote>
<p>This returns a value for each of the two supported units, SECONDS and NANOS. All other units throw an exception.</p>
</blockquote>
<p>This cannot be real. IT CANNOT BE SAYING WHAT IT SAYS. But it does. Hereâ€™s a screenshot:
Ì¦</p>
<p><img src="/img/screenshot-date-api.png" alt="Screnshot From JavaDoc"></p>
<h2 id="api-design-at-its-finest">API Design at itâ€™s finest</h2>
<p>So somebody, actually multiple people, looked at the proposal and said,</p>
<blockquote>
<p>why, yes, let this API accept only 2 units and throw exceptions otherwise. That, right here, is an API worthy of
bringing into our specification.</p>
</blockquote>
<p>And thatâ€™s why, folks, we cannot have nice APIs, not even now, in <strong>2000-freaking-18.</strong> But wait, I have another goodie
for you. Maybe you saw it already: Calling this method might throw 2 different exceptions:</p>
<blockquote>
<p>Throws: DateTimeException â€“ if the unit is not supported UnsupportedTemporalTypeException â€“ if the unit is not
supported</p>
</blockquote>
<p>Um, which will it throw? Anyway, Duration <em>is quite able</em> to do the conversion I
required.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Duration<span style="color:#f92672">.</span><span style="color:#a6e22e">of</span><span style="color:#f92672">(</span>90<span style="color:#f92672">,</span> ChronoUnit<span style="color:#f92672">.</span><span style="color:#a6e22e">SECONDS</span><span style="color:#f92672">)</span><span style="color:#f92672">.</span><span style="color:#a6e22e">toMillis</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
</code></pre></div><p>So if you wanted to convert dynamically, you are required to write a big switch statement or a freaking if-cascade.</p>
]]></content>
        </item>
        
        <item>
            <title>Using ElementaryOS Professionally</title>
            <link>https://d53dev.net/posts/2018/03/using-elementaryos-professionally/</link>
            <pubDate>Wed, 28 Mar 2018 22:07:08 +0100</pubDate>
            
            <guid>https://d53dev.net/posts/2018/03/using-elementaryos-professionally/</guid>
            <description>My employer agreed on buying me a new and shiny MacBook Pro, so I thought itâ€™s a good time to reflect on my experiences with using ElementaryOS (Freya) professionally daily driver for almost a year.
TL;DR I mostly enjoyed the ride. Elementary is fast, polished, functional and has outstanding multi-monitor support. On the other hand, itâ€™s still a Linux and the desktop experience is not nearly as polished as on MacOS and Windows.</description>
            <content type="html"><![CDATA[<p><img src="/img/elementary.png" alt="Screnshot From JavaDoc"></p>
<p>My employer agreed on buying me a new and shiny MacBook Pro, so I thought itâ€™s
a good time to reflect on my experiences with using ElementaryOS (Freya)
professionally daily driver for almost a year.</p>
<h2 id="tldr">TL;DR</h2>
<p>I mostly enjoyed the ride. Elementary is fast, polished, functional and has
outstanding multi-monitor support. On the other hand, itâ€™s still a Linux and
the desktop experience is not nearly as polished as on MacOS and Windows.</p>
<h2 id="the-good">The Good</h2>
<p>The installation worked flawlessly on my Thinkpad T460p (vPro branded Core
i5-6440HQ, 16GB RAM, 256GB SSD, integrated Intel HD 530), and I didn't have to
chase any drivers.</p>
<p>At the time of this writing, the current version &ldquo;Freya&rdquo; is
based off of Ubuntu 16.04, so the internals should be familiar to all you Ubuntu
fanboys (like me). Power users might sometimes run into trouble because
<code>uname -r</code> doesn't return <code>xenial</code>, it returns <code>freya</code>, so anything that relies
on that, like apt repositories, need manual intervention.</p>
<p>All my favourite IDEs (IDEA and VSCode) worked without any issues and with good
performance.</p>
<p>The overall look-and-feel of ElementaryOS is very nice. Some would even call it
polished, but I wouldn't go so far just yet. It's definitely the most
aesthetically pleasing Linux desktop I know, but it still has some rough edges
here and there.</p>
<p>The built-in apps are functional and pretty, albeit somewhat bare-bones. I will
discuss this in the next section in more detail.</p>
<p>The one thing that took me by surprise was the outstanding multi-monitor
support. I was using 2 external screens, one via HDMI and the other via
DisplayPort (remember the times where laptops still had all kinds of different
connectors?) together with the internal screen and ElementaryOS handled it just
fine. It worked flawlessly with all TVs and projectors I ever connected it to,
and it out-performed most Windows-based laptops in terms of compatibility. I
know this is partly due to the well-crafted hardware of the Thinkpad, but it
worked better than other similar Thinkpads running Windows, at least in my
office environment.</p>
<p>One thing that is much nicer on Linux than on MacOS is the Docker integration.
That's not a feature of ElementaryOS but it is still a strong point, in my book.
MacOS doesnâ€™t have access to the docker bridge, so you cannot access containers
directly â€“ only through published ports (or by monkey-patching docker, which
somehow hardcodes this network config). This also means that you need to
dockerize any application that needs to talk to any other dockerized app
directly, which lead to quite some overhead in the beginning.</p>
<h2 id="the-bad">The Bad</h2>
<p>The &ldquo;AppCenter&rdquo; has not yet reached critical mass, meaning that proper
applications are few and far in-between. Most paid apps were not worth their
price, in my opinion. I'm not sure that there is enough interest to ever make
AppCenter a platform worthy of broad adoption, and the 70/30 (but at least
50ct) platform fee is a bit steep for a platform with such a niche target
demographic (i.e. people willing to install a GNU/Linux desktop,
a free, as in beer, product AND willing to pay for apps in an app store).</p>
<p>The built-in apps, such as Mail and Calendar, are forks of other popular
open-source projects that now implement the ElementaryOS look and feel, but are
rather limited in functionality. For the most part, they work fine, but you
might be out of luck if you require more advanced settings or customization. In
my case, the calendar was incompatible with my company email system and there
was no way to make it work.</p>
<p>This leads me to the next point: the look-and-feel, though very nice, only works
for apps developed for ElementaryOS specifically. Other GTK+ or Qt apps will
look and behave differently.</p>
<h2 id="the-ugly">The Ugly</h2>
<p>At times, the configuration of wingpanel would get corrupted. This would happen
with or without my direct interaction, e.g., after removing or updating
applications or libraries. The effect was that the top bar and the app launcher
menu were either frozen or would disappear completely. A forensic cat-and-mouse
game ensued trying to find the reason for the mess.</p>
]]></content>
        </item>
        
    </channel>
</rss>
